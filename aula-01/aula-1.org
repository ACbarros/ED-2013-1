#+TITLE: Estruturas de Dados - Aula 1
#+AUTHOR: Alexandre Rademaker
#+EMAIL: arademaker@gmail.com
#+startup: showall
#+PROPERTY: cache yes
#+PROPERTY: results value

* O Curso

** Sobre o que é o curso?

- Algoritmos
- Análise de algorítmos
- Estruturas de dados

** Sobre o que não é o curso?

- Ensinar a programar
- Mas... Usarei exemplos em CL, R e Python

** Outras informações

- Perfil da turma?
- Aulas: 14
- Avaliação
- Estudo em grupo!
- Trabalhos digitais (implementações)

** Motivação

 - http://prezi.com/fhumwa8tb3fs/the-landscape-of-data-analysis/

** Recursos

Site do curso:

https://github.com/arademaker/ED-2013-1

Livro Texto:

http://www.cs.berkeley.edu/~vazirani/algorithms.html

- Coursera:

- https://www.coursera.org/course/algs4partI
- https://www.coursera.org/course/algs4partII

Complementar:

- http://www.amazon.com/Algorithm-Design-Jon-Kleinberg/dp/0321295358
- http://www.amazon.com/Python-Algorithms-Mastering-Language-Experts/dp/1430232374

* Algorítmos

1448 Gutenberg -> imprensa -> revolução industrial -> algarismos romanos
-> simples contas eram complexas

#+BEGIN_SRC lisp :results value :exports both
(format nil "~@r" 1448)
#+END_SRC

#+RESULTS[0dfba720069141a84e68ce74e7c04bf33e95bda5]:
: MCDXLVIII

AD 600 India, sistema decimal -> imprensa -> Al Khwarizmi em árabe,
métodos adição/sub/mult/div -> algorithms -> Leste/Europa

* Fibonnaci

Al Khwarizmi’s work -> divulgado por 15th century Italian
mathematician Leonardo Fibonacci. 

Mais famoso trabalho de Fibonacci -> Sequencia de Fibonacci.

0,1,1,2,3,5,8,13,21,34,...

Uso: biology, demography, art, architecture, music...

Cresce tão rápido quando potências de 2. $F_n \approx 2^{0.694n}$. Como
saber o valor preciso de $F_{100}$ ou $F_{200}$?

#+BEGIN_SRC lisp :results value
  (defun fib1 (n)
    (cond 
      ((= n 0) 0)
      ((= n 1) 1)
      (t (+ (fib1 (- n 1)) (fib1 (- n 2))))))
  
  (fib1 10)
#+END_SRC

#+RESULTS[c80fac9ede575d6260bc73f9f16d7fc6d7b456a4]:
: 55

Perguntas:

1. Está correto? 
2. Quanto tempo demora para processar em função da entrada?
3. Podemos melhorar?

Respostas:

1. Fácil, pela definição da sequência Fn

2. Seja T(n) o número de *passos* necessários para computar =(fib1 n)=. 

\begin{equation}
T(n) \left\{ 
\begin{array}{ll}
  \leq 2 & \text{se } n \leq 1 \\
  = T(n-1) + T(n-2) + 3 & \text{se } n > 1 
\end{array} \right.
\end{equation}

Logo $T(n) \geq F(n)$. Mas quanto ruim é isso? Seja

\[
T(200) \geq F200 \geq 2^{138}
\] 
dado que $F(n) \approx 2^{0.694n}$.

Imagine um computador capaz de executar 40 trilhões de passos por segundo
(fib1 200) demoraria 2^92 seconds

#+BEGIN_SRC lisp :results value
(format nil "~r" 40000000000000)
#+END_SRC

#+RESULTS[5b3f73022ce673dc04c7f4f666e071527a05ec87]:
: forty trillion

#+name: val1
#+BEGIN_SRC lisp :results value
(log 40000000000000 2)
#+END_SRC

#+RESULTS[38b4f6ebd5b6865474d8731b51343cd43409707d]: val1
: 45.185066

Lembrando: 2^x / 2^y = 2^(x - y)

#+BEGIN_SRC lisp :var v=val1 :results value
(- 138 v)
#+END_SRC

#+RESULTS[4be33a8b37c3c1aa2e595d51cf1ae6eb8639c3b1]:
: 92.81493

Moore’s law
fib1(n) é proporcional à 2^(0.694n) ≈ (1.6)^n
Fn+1 demora 1.6 * o tempo de fn
Logo se conseguirmos computar hoje F100 podemos no ano que vem computar F101!

Em anos:

#+BEGIN_SRC lisp :results value
(/ (expt 2 92) (* 60.0 60 24 360)) 
#+END_SRC

** Solução Linear

Solução recursiva repete computações -> vide Tree

#+BEGIN_SRC lisp :results value
  (defun fib2 (n)
    (labels ((calc-fib (n a b)
               (if (= n 0)
                   a
                   (calc-fib (- n 1) b (+ a b)))))
      (calc-fib n 0 1)))
  
  (fib2 10)
#+END_SRC

#+RESULTS[7311a2dd26836cde33654beb16d156cb10c6ef0b]:
: 55

Ou usando *repetição* ao invés de *recursão*:

#+BEGIN_SRC lisp :results value
  (defun fib3 (n) 
    (cond 
      ((= n 0) 0)
      ((= n 1) 1)
      (t (loop repeat (- n 1)
               for x = 0 then y
               for y = 1 then z
               for z = (+ x y) 
               finally (return z)))))
  
  (fib3 10)
#+END_SRC

#+RESULTS[bbeb94b2a9f9908cb4b3550e06768f73a1947b79]:
: 55

#+BEGIN_SRC lisp :results value
    (defun fib4 (n)
      (do* ((count 1 (+ 1 count))
            (x 0 y)
            (y 1 z)
            (z (+ x y) (+ x y)))
           ((>= count (- n 1)) z)))
    
    (fib4 10)
#+END_SRC

#+RESULTS[b25362f38cf35fdd7b986825281b06cc0ed0e854]:
: 55

1. Corretos?
2. Quanto tempo?
3. Pode melhorar?

Respostas:

1. ?
2. Linear
3. Sim. Vide exercícios

** Análise mais cuidadosa

- Passos básicos tomam tempo constante?
- armazenar, aritmética simples, comparação, chamada de função etc?
- Fibonacci nums pequenos podem ser armazenados em 32bits
- Fibonacci grandes requerem na ordem de 0.694n bits 
- aritimética com nums grandes é mais custosa?! 
- custo da adição é proporcional ao número de algarismos 
- fib1 performance é Fn agora então seria nFn
- fib2 agora seria proporcional a n^2

* Notação Big O

p.15: Let $f(n)$ and $g(n)$ be functions from positive integers to
positive reals. We say $f = O(g)$ (which means that "f grows no faster
than g") if there is a constant $c > 0$ such that $f(n) \leq c g (n)$
-- Highlighted oct 16, 2011

$f = O(g)$ é como dizer $f \leq g$. 

** Exemplo

#+BEGIN_SRC R :results output graphics :file plot.png :exports both
  f1 <- function(n) n*n
  f2 <- function(n) 2*n + 20
  my <- seq(1,10, by = 0.1)
  data <- data.frame(serie = my, f1 = f1(my), f2 = f2(my)) 
  plot(my,data$f1, type="l", col="blue")
  lines(my,data$f2, type="l", col="red")
#+END_SRC

#+RESULTS[3be4746dc7c71488d6eda173229be1e46d5383dc]:
[[file:plot.png]]


#+BEGIN_SRC R :results output :exports both
  f1 <- function(n) n*n
  f2 <- function(n) 2*n + 20
  my <- seq(1, 10, by = 0.1)
  f3 <- function(n) f1(n)/f2(n)
  f4 <- function(n) f2(n)/f1(n)
  data.frame(my, f3(my), f4(my))
#+END_SRC

#+RESULTS[5c1863c38cade0cf4a91597fe05718f4532b7dff]:
#+begin_example
     my     f3.my.     f4.my.
1   1.0 0.04545455 22.0000000
2   1.1 0.05450450 18.3471074
3   1.2 0.06428571 15.5555556
4   1.3 0.07477876 13.3727811
5   1.4 0.08596491 11.6326531
6   1.5 0.09782609 10.2222222
7   1.6 0.11034483  9.0625000
8   1.7 0.12350427  8.0968858
9   1.8 0.13728814  7.2839506
10  1.9 0.15168067  6.5927978
11  2.0 0.16666667  6.0000000
12  2.1 0.18223140  5.4875283
13  2.2 0.19836066  5.0413223
14  2.3 0.21504065  4.6502836
15  2.4 0.23225806  4.3055556
16  2.5 0.25000000  4.0000000
17  2.6 0.26825397  3.7278107
18  2.7 0.28700787  3.4842250
19  2.8 0.30625000  3.2653061
20  2.9 0.32596899  3.0677765
21  3.0 0.34615385  2.8888889
22  3.1 0.36679389  2.7263267
23  3.2 0.38787879  2.5781250
24  3.3 0.40939850  2.4426079
25  3.4 0.43134328  2.3183391
26  3.5 0.45370370  2.2040816
27  3.6 0.47647059  2.0987654
28  3.7 0.49963504  2.0014609
29  3.8 0.52318841  1.9113573
30  3.9 0.54712230  1.8277449
31  4.0 0.57142857  1.7500000
32  4.1 0.59609929  1.6775729
33  4.2 0.62112676  1.6099773
34  4.3 0.64650350  1.5467820
35  4.4 0.67222222  1.4876033
36  4.5 0.69827586  1.4320988
37  4.6 0.72465753  1.3799622
38  4.7 0.75136054  1.3309190
39  4.8 0.77837838  1.2847222
40  4.9 0.80570470  1.2411495
41  5.0 0.83333333  1.2000000
42  5.1 0.86125828  1.1610919
43  5.2 0.88947368  1.1242604
44  5.3 0.91797386  1.0893556
45  5.4 0.94675325  1.0562414
46  5.5 0.97580645  1.0247934
47  5.6 1.00512821  0.9948980
48  5.7 1.03471338  0.9664512
49  5.8 1.06455696  0.9393579
50  5.9 1.09465409  0.9135306
51  6.0 1.12500000  0.8888889
52  6.1 1.15559006  0.8653588
53  6.2 1.18641975  0.8428720
54  6.3 1.21748466  0.8213656
55  6.4 1.24878049  0.8007812
56  6.5 1.28030303  0.7810651
57  6.6 1.31204819  0.7621671
58  6.7 1.34401198  0.7440410
59  6.8 1.37619048  0.7266436
60  6.9 1.40857988  0.7099349
61  7.0 1.44117647  0.6938776
62  7.1 1.47397661  0.6784368
63  7.2 1.50697674  0.6635802
64  7.3 1.54017341  0.6492775
65  7.4 1.57356322  0.6355004
66  7.5 1.60714286  0.6222222
67  7.6 1.64090909  0.6094183
68  7.7 1.67485876  0.5970653
69  7.8 1.70898876  0.5851414
70  7.9 1.74329609  0.5736260
71  8.0 1.77777778  0.5625000
72  8.1 1.81243094  0.5517452
73  8.2 1.84725275  0.5413444
74  8.3 1.88224044  0.5312818
75  8.4 1.91739130  0.5215420
76  8.5 1.95270270  0.5121107
77  8.6 1.98817204  0.5029746
78  8.7 2.02379679  0.4941208
79  8.8 2.05957447  0.4855372
80  8.9 2.09550265  0.4772125
81  9.0 2.13157895  0.4691358
82  9.1 2.16780105  0.4612969
83  9.2 2.20416667  0.4536862
84  9.3 2.24067358  0.4462944
85  9.4 2.27731959  0.4391127
86  9.5 2.31410256  0.4321330
87  9.6 2.35102041  0.4253472
88  9.7 2.38807107  0.4187480
89  9.8 2.42525253  0.4123282
90  9.9 2.46256281  0.4060810
91 10.0 2.50000000  0.4000000
#+end_example

